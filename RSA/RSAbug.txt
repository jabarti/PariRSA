/* SPRAWDZAMY CZY PLIKI SĄ PUSTE!!! Żeby nie tworzyć za każdym odpaleniem pliku kolejnych Kluczy*/ 
v1=readvec(public_key);
lengV1 = length(v1);
v2 = readvec(private_key);
lengV2 = length(v2);
v3=readvec(Message);
lengV3 = length(v3);

if(lengV1 == 0 && lengV2 == 0,{
p = nextprime(2^500+random(2^500)),
q = nextprime(2^550+random(2^500)),
n = p * q,
e=random(n),								\\ PUBLIC KEY
temp1=(p-1)*(q-1),
while(gcd(e,temp1)!=1, e=e+1),
d=lift(Mod(e,temp1)^(-1)),					\\ PRIVATE KEY
check = (e*d)%temp1,						\\ check - if = 1 OK;
print("n: ",n,"\ne: ",e,"\nd: ",d)
},{
n=v1[2],
e=v1[1],									\\ PUBLIC KEY
check=1,
d=v2[1],										\\ PRIVATE KEY
print("n: ",n,"\ne: ",e,"\nd: ",d)
});


E(x)=lift(Mod(x,n)^e) 		\\ Encodes using above data (szyfrowane PUBLIC KEY)

D(x)=lift(Mod(x,n)^d) 		\\ Decodes using above data (odszyfrowane PRIVATE KEY)


if(lengV1 == 0, if(check, write(public_key, e"\n"n)));	
if(lengV2 == 0, if(check, write(private_key, d"\n"n)));
if(lengV3 == 0, Sour_Message = "Zuzanna i Maciek", Sour_Message = v3[1]);	


print("Sour_Message: ",Sour_Message);
Sour_Message_VECTOR = Vecsmall(Sour_Message);


suma=0;
i=0;
lenVEC = length(Sour_Message_VECTOR);

for(x = 1, lenVEC, {
		i = x-1;
		temp = Sour_Message_VECTOR[x];
		suma = suma + (temp*(2^i));
		print("temp:",temp,"potega=",2^i,"suma=",suma);
		})			\\	Evaluates seq, where the formal variable X goes from a to b. Nothing is done if a > b. a and b must be in R.
/**/

print("suma=",suma);

org_tex = Strchr(Sour_Message_VECTOR)


secretMessage = E(suma);
DecryptINTmessage = D(secretMessage);

print("dług.szyfr: ",length(Str(secretMessage)));

print ("Sour_Message_VECTOR:", Sour_Message_VECTOR);
print ("org_tex:", org_tex);

write(DecryptINTMessage, DecryptINTmessage)
write(Secret_Message, secretMessage)

